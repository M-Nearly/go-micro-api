// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.user.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Login service

type LoginService interface {
	Phone(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Email(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Username(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Facebook(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Google(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Twitter(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type loginService struct {
	c    client.Client
	name string
}

func NewLoginService(name string, c client.Client) LoginService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &loginService{
		c:    c,
		name: name,
	}
}

func (c *loginService) Phone(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Login.Phone", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Email(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Login.Email", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Username(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Login.Username", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Facebook(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Login.Facebook", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Google(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Login.Google", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Twitter(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Login.Twitter", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Login service

type LoginHandler interface {
	Phone(context.Context, *Request, *Response) error
	Email(context.Context, *Request, *Response) error
	Username(context.Context, *Request, *Response) error
	Facebook(context.Context, *Request, *Response) error
	Google(context.Context, *Request, *Response) error
	Twitter(context.Context, *Request, *Response) error
}

func RegisterLoginHandler(s server.Server, hdlr LoginHandler, opts ...server.HandlerOption) error {
	type login interface {
		Phone(ctx context.Context, in *Request, out *Response) error
		Email(ctx context.Context, in *Request, out *Response) error
		Username(ctx context.Context, in *Request, out *Response) error
		Facebook(ctx context.Context, in *Request, out *Response) error
		Google(ctx context.Context, in *Request, out *Response) error
		Twitter(ctx context.Context, in *Request, out *Response) error
	}
	type Login struct {
		login
	}
	h := &loginHandler{hdlr}
	return s.Handle(s.NewHandler(&Login{h}, opts...))
}

type loginHandler struct {
	LoginHandler
}

func (h *loginHandler) Phone(ctx context.Context, in *Request, out *Response) error {
	return h.LoginHandler.Phone(ctx, in, out)
}

func (h *loginHandler) Email(ctx context.Context, in *Request, out *Response) error {
	return h.LoginHandler.Email(ctx, in, out)
}

func (h *loginHandler) Username(ctx context.Context, in *Request, out *Response) error {
	return h.LoginHandler.Username(ctx, in, out)
}

func (h *loginHandler) Facebook(ctx context.Context, in *Request, out *Response) error {
	return h.LoginHandler.Facebook(ctx, in, out)
}

func (h *loginHandler) Google(ctx context.Context, in *Request, out *Response) error {
	return h.LoginHandler.Google(ctx, in, out)
}

func (h *loginHandler) Twitter(ctx context.Context, in *Request, out *Response) error {
	return h.LoginHandler.Twitter(ctx, in, out)
}

// Client API for User service

type UserService interface {
	Logout(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Logout(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.Logout", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Logout(context.Context, *Request, *Response) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Logout(ctx context.Context, in *Request, out *Response) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Logout(ctx context.Context, in *Request, out *Response) error {
	return h.UserHandler.Logout(ctx, in, out)
}
